<div class="col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main" id-target="agent-management">
    <div class="row">
        <div class="col-md-12 col-lg-12">
            <h1><i class="fa fa-home"></i> 下级代理商 </h1>
            <ol class="breadcrumb">
                <li><a href="${path.concat('/dashboard')}">首页</a></li>
                <li><a data-toggle="collapse" data-parent="#accordion" href="#agent-management">代理管理</a></li>
                <li class="active">下级代理商</li>
            </ol>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 col-lg-12">
            <div id="container" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
        </div>
    </div>
</div>
<script>
	var Node = {
    height: 20,
    width: 60,
    padding: 30,
    paddingTop: 50,
    paddingText: 5,
    paddingLeft: 20,
    arrowLength: 4,
    arrowWidth: 3,
    create: function(textVal){
        return {
            text: textVal,
            childNodes: [],
            parentNode: null,
            index: null,
            x: null,
            y: null,
            add: function(node) {
            	
                this.childNodes[node.index = this.childNodes.length] = node;
                return node.parentNode = this;
            },
            leftNode: function() {
                return this.parentNode ? (this.index > 0 ? this.parentNode.childNodes[this.index - 1] : this.parentNode.leftNode()) : null;
            },
            top: function() {
                if (this.y) return this.y;
                else return this.y = (this.parentNode ? this.parentNode.top() + Node.height + Node.padding : Node.paddingTop);
            },
            left: function() {
                if (this.x) {
                    return this.x;
                }else{
                    return this.x = this.leftNode() ? this.leftNode().left() + Node.padding + this.leftNode().childWidth() : Node.paddingLeft;
                }
            },
            childHeight: function() {
                var h = 0;if (this.childNodes.length > 0) {for(var i=0;i<this.childNodes.length;i++) h = Math.max(h,this.childNodes[i].childHeight() + Node.padding);}
                return (h === 0) ? Node.height : h ;
            },
            childWidth: function() {
                var w = 0;if (this.childNodes.length > 0) {for(var i=0;i<this.childNodes.length;i++) w = w + this.childNodes[i].childWidth() + Node.padding;}
                return (w === 0) ? Node.width : w - Node.padding;
            },
            toString: function() {
                return this.text + '[' + this.left() + ',' + this.top() + ']' + (this.childNodes.length > 0 ? ':{' + this.childNodes + '}' : '');
            },
            arrowX: function () {
                return this.left() + this.childWidth() / 2 - (this.parentNode.left() + this.parentNode.childWidth() / 2 - Node.width / 2) - Node.width / 2;
            },
            arrowY: function () {
                return Node.padding - 2 * Node.paddingText;
            },
            arrow: function(renderer, colors) {
                var a = Node.arrowLength, b = Node.arrowWidth, x2 = this.arrowX(), y2 = this.arrowY(),
                    x = this.parentNode.left() + this.parentNode.childWidth() / 2 - Node.width / 2+Node.width/2 + Node.paddingText,
                    y = this.parentNode.top() + Node.height + 2 * Node.paddingText
                renderer.path(['M', 0, 0, 'C', 0, y2/1.8, x2, 0, x2, y2]).attr({'stroke-width': 2, stroke: colors[1]}).translate(x,y).add()
            },
            drow: function(renderer, colors) {
                var x = this.left() + this.childWidth() / 2 - Node.width / 2, y = this.top();
                renderer.label(this.text, x, y).attr({fill: colors[0], stroke: 'white','stroke-width': 3,padding: Node.paddingText, r: 2 * Node.paddingText, width: Node.width, height: Node.height}).css({color: 'white', textAlign:'center',fontWeight: 'bold',fontSize: '10px'}).add().shadow(true);
                if (this.childNodes.length > 0) {
                    for(var i=0;i<this.childNodes.length;i++) {
                        this.childNodes[i].drow(renderer, colors);
                        this.childNodes[i].arrow(renderer, colors);
                    }
                }
            }
        };
    }
}
var n = Node.create

     var datas = n("${agent.name}");
     var agentList=${agentList};
     for(var i=0;i<agentList.length;i++){
        datas.add(n(agentList[i].name));
     }
    
 


    var chart = new Highcharts.Chart({
        chart: {
            renderTo: 'container',
            events: {load: function () { 
                datas.drow(this.renderer, Highcharts.getOptions().colors);
            }}
        },
        title: {text: '代理商结构图'}
    });
</script>