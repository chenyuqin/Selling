<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="selling.order.pool">

	<resultMap id="refundConfigVo" type="selling.sunshine.model.RefundConfig">
		<result property="refundConfigId" column="refund_config_id"></result>
		<result property="amountTrigger" column="refund_trigger_amount"></result>
		<result property="level1Percent" column="level_1_percent"></result>
		<result property="level2Percent" column="level_2_percent"></result>
		<result property="level3Percent" column="level_3_percent"></result>
		<result property="monthConfig" column="month_config"></result>
	</resultMap>

	<resultMap id="goods4AgentVo" type="common.sunshine.model.selling.goods.Goods4Agent">
		<result property="goodsId" column="goods_id"></result>
		<result property="name" column="goods_name"></result>
		<result property="description" column="goods_description"></result>
		<result property="agentPrice" column="agent_price"></result>
		<result property="blockFlag" column="block_flag"></result>
		<result property="createAt" column="create_time"></result>
	</resultMap>
	
	<resultMap id="agentLiteVo" type="common.sunshine.model.selling.agent.lite.Agent">
        <result property="agentId" column="agent_id"></result>
        <result property="name" column="agent_name"></result>
        <result property="phone" column="agent_phone"></result>
    </resultMap>

	<resultMap id="agentVo" type="common.sunshine.model.selling.agent.Agent">
		<result property="agentId" column="agent_id"></result>
		<result property="name" column="agent_name"></result>
		<result property="gender" column="agent_gender"></result>
		<result property="phone" column="agent_phone"></result>
		<result property="address" column="agent_address"></result>
		<result property="wechat" column="agent_wechat"></result>
		<result property="password" column="agent_password"></result>
		<result property="granted" column="agent_granted"></result>
		<result property="agentRefund" column="agent_refund"></result>
		<result property="coffer" column="agent_coffer"></result>
		<result property="blockFlag" column="block_flag"></result>
		<result property="createAt" column="create_time"></result>
		<association property="upperAgent" column="agentId = upper_agent_id" select="agentLiteQuery"></association>
	</resultMap>

    <resultMap id="orderPoolVo" type="selling.sunshine.model.OrderPool">
        <result property="orderPoolId" column="pool_id"></result>
        <result property="quantity" column="quantity"></result>
        <result property="price" column="price"></result>
        <result property="refundAmount" column="refund_amount"></result>
        <result property="poolDate" column="pool_date"></result>
        <result property="blockFlag" column="block_flag"></result>
        <result property="createAt" column="create_time"></result>
        <association property="agent" column="agentId = agent_id" select="agentLiteQuery"></association>
		<association property="goods" column="goodsId = goods_id" select="goods4AgentQuery"></association>
		<association property="refundConfig" column="refundConfigId = refund_config_id" select="refundConfigQuery"></association>
    </resultMap>
    
    <resultMap id="sumOrderVo" type="java.util.Map">
        <result property="agent" column="agent"></result>
        <result property="goods" column="goods"></result>
        <result property="quantity" column="quantity"></result>
        <result property="price" column="price"></result>
    </resultMap>
    
    <resultMap id="totalQuantityAllVo" type="selling.sunshine.model.sum.TotalQuantityAll">
    	<result property="quantity2" column="quantity2"></result>
    	<result property="quantity1" column="quantity1"></result>
    	<result property="quantity3" column="quantity3"></result>
    	<result property="price2" column="price2"></result>
    	<result property="price1" column="price1"></result>
    	<result property="price3" column="price3"></result>
    </resultMap>
    
    <resultMap id="orderQuantityVo" type="java.util.Map">
        <result property="quantity" column="quantity"></result>
    </resultMap>
    <resultMap id="customerOrderQuantityVo" type="java.util.Map">
        <result property="quantity" column="quantity"></result>
    </resultMap>

	<select id="refundConfigQuery" parameterType="java.util.Map" resultMap="refundConfigVo">
		SELECT refund_config_id, refund_trigger_amount, level_1_percent,level_2_percent,level_3_percent,month_config
		FROM refund_config
		WHERE refund_config_id = #{refundConfigId}
	</select>
	
	<select id="agentLiteQuery" parameterType="java.util.Map" resultMap="agentLiteVo">
        SELECT agent_id, agent_name, agent_phone
        FROM agent
        WHERE agent_id = #{agentId}
    </select>

	<select id="agentQuery" parameterType="java.util.Map" resultMap="agentVo">
		SELECT agent_id, upper_agent_id,agent_name, agent_gender, agent_phone, agent_address,
		agent_password, agent_wechat, agent_granted, agent_coffer, block_flag,
		create_time,agent_refund
		FROM agent
		WHERE agent_id = #{agentId}
	</select>
	
	<select id="query" parameterType="java.util.Map" resultMap="orderPoolVo">
		SELECT pool_id,agent_id,goods_id,refund_config_id,quantity,price,refund_amount,pool_date,block_flag,create_time
		FROM order_pool
		WHERE 1 = 1 
		<if test="orderPoolId != null and orderPoolId != ''">
            AND pool_id	 = #{orderPoolId}
        </if>
        <if test="agentId != null and agentId != ''">
            AND agent_id = #{agentId}
        </if>
        <if test="goodsId != null and goodsId != ''">
            AND goods_id = #{goodsId}
        </if>
        <if test="poolDate != null and poolDate != ''">
            AND pool_date = #{poolDate}
        </if>
        <if test="blockFlag != null">
            AND block_flag = #{blockFlag}
        </if>
        <if test="date != null and date != ''">
			AND pool_date LIKE #{date}
		</if>
		<if test="monthConfig != null and monthConfig != ''">
		    AND create_time >= DATE_SUB( CURDATE() , INTERVAL #{monthConfig} MONTH )
		</if>
        ORDER BY pool_date
	</select>
	
	<select id="sumOrder" parameterType="java.util.Map" resultMap="sumOrderVo">
		SELECT o.agent_id AS agent,i.goods_id AS goods,SUM(i.goods_quantity) AS quantity,SUM(i.order_item_price) AS price
		FROM `order` o,order_item i
		WHERE 1 = 1 AND o.order_id=i.order_id AND (i.order_item_status='1' OR i.order_item_status='2' OR i.order_item_status='3') AND order_type='0'
		<if test="date != null and date != ''">
			AND i.create_time LIKE #{date}
		</if>
		<if test="agentId != null and agentId != ''">
			AND o.agent_id = #{agentId}
		</if>
        GROUP BY o.agent_id,i.goods_id
	</select>
	
	<select id="calculateOrderQuantity" parameterType="java.util.Map" resultMap="orderQuantityVo">
		SELECT SUM(i.goods_quantity) AS quantity
		FROM `order` o,order_item i
		WHERE 1 = 1 AND o.order_id=i.order_id AND (i.order_item_status='1' OR i.order_item_status='2' OR i.order_item_status='3') AND order_type='0'
		<if test="date != null and date != ''">
			AND o.create_time LIKE #{date}
		</if>
		<if test="agentId != null and agentId != ''">
			AND o.agent_id = #{agentId}
		</if>
	</select>
	
	<select id="calculateCustomerOrderQuantity" parameterType="java.util.Map" resultMap="customerOrderQuantityVo">
		SELECT SUM(quantity) AS quantity
		FROM customer_order
		WHERE 1 = 1 AND (order_status='1' OR order_status='2' OR order_status='3')
		<if test="date != null and date != ''">
			AND create_time LIKE #{date}
		</if>
		<if test="agentId != null and agentId != ''">
			AND agent_id = #{agentId}
		</if>
	</select>
	
	<select id="calculateQuantityAll" parameterType="java.util.Map" resultMap="totalQuantityAllVo">
	  <if test="agentId != null and agentId != ''">
	     select if(isnull(quantity2),0,quantity2) as quantity2,if(isnull(price2),0,price2) as price2,
	            if(isnull(quantity1),0,quantity1) as quantity1,if(isnull(price1),0,price1) as price1,
                if(isnull(quantity3),0,quantity3) as quantity3,if(isnull(price3),0,price3) as price3
         from(
      select agent_id,sum(quantity) as quantity1,sum(price) as price1 
     from ( select if(isnull(agent_id),#{agentId},agent_id) as agent_id,sum(quantity) as quantity,sum(total_price) as price from  customer_order  
               where order_status in(1,2,3)
               and date_format(create_time,'%Y-%m')=date_format(now(),'%Y-%m') and agent_id=#{agentId}
            union all
                 select if(isnull(agent_id),#{agentId},agent_id) as agent_id,sum(goods_quantity) as quantity,sum(order_item_price) as price from `order`
                left join order_item
                on `order`.order_id = order_item.order_id 
		        where `order`.order_type=0 and `order`.order_status in(2,3,4,5) 
                and date_format(`order`.create_time,'%Y-%m')=date_format(now(),'%Y-%m') and `order`.agent_id=#{agentId}
	 ) total1
	 group by agent_id) t1,
	 ( select agent_id,sum(quantity) as quantity2,sum(price) as price2 
     from ( select if(isnull(agent_id),#{agentId},agent_id) as agent_id,sum(quantity) as quantity,sum(total_price) as price from  customer_order  
               where order_status in(1,2,3)
               and date_format(create_time,'%Y-%m-%d')=date_format(now(),'%Y-%m-%d') and agent_id=#{agentId}
            union all
                select if(isnull(agent_id),#{agentId},agent_id) as agent_id,sum(goods_quantity) as quantity,sum(order_item_price) as price from `order`
                left join order_item
                on `order`.order_id = order_item.order_id 
		        where `order`.order_type=0 and `order`.order_status in(2,3,4,5) 
                and date_format(`order`.create_time,'%Y-%m-%d')=date_format(now(),'%Y-%m-%d') and `order`.agent_id=#{agentId}
      ) total2
	  group by agent_id) t2, 
      ( select agent_id,sum(quantity) as quantity3,sum(price) as price3 
       from ( select if(isnull(agent_id),#{agentId},agent_id) as agent_id,sum(quantity) as quantity,sum(total_price) as price from  customer_order  
               where order_status in(1,2,3)
               and agent_id=#{agentId}
            union all
                select if(isnull(agent_id),#{agentId},agent_id) as agent_id,sum(goods_quantity) as quantity,sum(order_item_price) as price from `order`
                left join order_item
                on `order`.order_id = order_item.order_id 
		        where `order`.order_type=0 and `order`.order_status in(2,3,4,5) 
                and `order`.agent_id=#{agentId}
      ) total3
	  group by agent_id) t3 where t1.agent_id=t2.agent_id and t1.agent_id=t3.agent_id;
	  </if>
	</select>

	<select id="goods4AgentQuery" parameterType="java.util.Map" resultMap="goods4AgentVo">
		SELECT goods_id, goods_name, goods_description, prime_price, agent_price, block_flag, create_time
		FROM goods
		WHERE goods_id = #{goodsId}
	</select>
	
	<insert id="insert" parameterType="selling.sunshine.model.OrderPool"
		useGeneratedKeys="false">
		INSERT INTO order_pool
		<set>
			pool_id = #{orderPoolId},
			quantity = #{quantity},
			price = #{price},
			pool_date=#{poolDate},
			<if test="refundAmount != null and refundAmount != ''">
			    refund_amount = #{refundAmount},
			</if>
			<if test="goods != null and goods != ''">
				goods_id = #{goods.goodsId},
			</if>
			<if test="agent != null and agent != ''">
				agent_id = #{agent.agentId},
			</if>
			<if test="refundConfig != null and refundConfig != ''">
				refund_config_id = #{refundConfig.refundConfigId},
			</if>
			block_flag = #{blockFlag},
			create_time = #{createAt}
		</set>
	</insert>
	
	<update id="update" parameterType="selling.sunshine.model.OrderPool" useGeneratedKeys="false">
	   UPDATE order_pool
	    <set>
            <if test="refundAmount != null and refundAmount != ''">
                refund_amount = #{refundAmount},
            </if>
            <if test="blockFlag != null and blockFlag != ''">
                block_flag = #{blockFlag},
            </if>
        </set>
        WHERE pool_id = #{orderPoolId}
	</update>

</mapper>